{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CARET analyze # API for user # architecture infra plot runtime exceptions API for developer # common record value_objects","title":"HOME"},{"location":"#caret-analyze","text":"","title":"CARET analyze"},{"location":"#api-for-user","text":"architecture infra plot runtime exceptions","title":"API for user"},{"location":"#api-for-developer","text":"common record value_objects","title":"API for developer"},{"location":"architecture/","text":"","title":"architecture"},{"location":"common/","text":"Summary # Bases: UserDict Temporary dictionary to use when outputting summaries. Util # find_one ( condition , items ) staticmethod # Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], bool ] required items Optional [ Iterable [ Any ]] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"common"},{"location":"common/#caret_analyze.common.Summary","text":"Bases: UserDict Temporary dictionary to use when outputting summaries.","title":"Summary"},{"location":"common/#caret_analyze.common.Util","text":"","title":"Util"},{"location":"common/#caret_analyze.common.util.Util.find_one","text":"Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], bool ] required items Optional [ Iterable [ Any ]] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"find_one()"},{"location":"exceptions/","text":"Error # Bases: Exception Base class for exception in this module. InvalidArgumentError # Bases: Error Failed to process function. InvalidReaderError # Bases: Error Failed to load architecutre. InvalidRecordsError # Bases: Error Given Records does not have the necessary columns. InvalidTraceFormatError # Bases: Error Failed to load trace data. InvalidYamlFormatError # Bases: Error Failed to load yaml. ItemNotFoundError # Bases: Error Failed to identify item that match the condition. MultipleItemFoundError # Bases: Error Failed to identify item that match the condition. TraceResultAanalyzeError # Bases: Error Failed to parse trace results. __init__ ( * args ) # Construct exception instance. UnsupportedNodeRecordsError # Bases: Error Failed to calculate node path records. UnsupportedTypeError # Bases: Error Given type is unsupported.","title":"exceptions"},{"location":"exceptions/#caret_analyze.exceptions.Error","text":"Bases: Exception Base class for exception in this module.","title":"Error"},{"location":"exceptions/#caret_analyze.exceptions.InvalidArgumentError","text":"Bases: Error Failed to process function.","title":"InvalidArgumentError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidReaderError","text":"Bases: Error Failed to load architecutre.","title":"InvalidReaderError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidRecordsError","text":"Bases: Error Given Records does not have the necessary columns.","title":"InvalidRecordsError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidTraceFormatError","text":"Bases: Error Failed to load trace data.","title":"InvalidTraceFormatError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidYamlFormatError","text":"Bases: Error Failed to load yaml.","title":"InvalidYamlFormatError"},{"location":"exceptions/#caret_analyze.exceptions.ItemNotFoundError","text":"Bases: Error Failed to identify item that match the condition.","title":"ItemNotFoundError"},{"location":"exceptions/#caret_analyze.exceptions.MultipleItemFoundError","text":"Bases: Error Failed to identify item that match the condition.","title":"MultipleItemFoundError"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAanalyzeError","text":"Bases: Error Failed to parse trace results.","title":"TraceResultAanalyzeError"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAanalyzeError.__init__","text":"Construct exception instance.","title":"__init__()"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedNodeRecordsError","text":"Bases: Error Failed to calculate node path records.","title":"UnsupportedNodeRecordsError"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedTypeError","text":"Bases: Error Given type is unsupported.","title":"UnsupportedTypeError"},{"location":"infra/","text":"InfraBase # infrastracture base class. Lttng # Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource. compose_callback_records () # Compose callback records of all communications in one records. Returns: Type Description RecordsInterface columns: - callback_start_timestamp - callback_end_timestamp - is_intra_process - callback_object compose_inter_proc_comm_records () # Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional) compose_intra_proc_comm_records () # Compose intra process communication records of all communications in one records. Returns: Type Description RecordsInterface columns: - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - message_timestamp get_callback_groups ( node ) # Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ] get_executors () # Get executors information. Returns: Type Description Sequence [ ExecutorInfo ] get_nodes () # Get nodes. Returns: Type Description Sequence [ NodeValueWithId ] nodes info. get_publisher_qos ( pub ) # Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos get_publishers ( node ) # Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ] get_rmw_impl () # Get rmw implementation. Returns: Type Description str rmw_implementation get_subscription_callbacks ( node ) # Get subscription callbacks infomation. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ] get_subscription_qos ( sub ) # Get subscription qos. Parameters: Name Type Description Default sub SubscriptionCallbackValueLttng target subscription required Returns: Type Description Qos get_timer_callbacks ( node ) # Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ] get_timers ( node ) # Get timers information. Returns: Type Description Sequence [ TimerValue ] RecordsProvider # callback_records ( callback_info ) abstractmethod # Compose callback records. Parameters: Name Type Description Default callback_info CallbackStructInfo [description] required Returns: Type Description RecordsInterface [description] variable_passing_records ( variable_passing_info ) abstractmethod # Compose variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo required Returns: Type Description RecordsInterface RecordsProviderLttng # Bases: RuntimeDataProvider Records are processed and measurement results are calculated. In addition to merging, filtering and other operations are performed here. callback_records ( callback ) # Return callback duration records. Parameters: Name Type Description Default callback_val CallbackStructValue target callback value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [callback_name]/callback_end_timestamp communication_records ( comm_val ) # Provide communication records. Parameters: Name Type Description Default comm_info CommunicationStructInfo communicadtion info. required Returns: Type Description RecordsInterface Columns: - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_publish_timestamp (Optional) - [callback_name]/callback_start_timestamp publish_records ( publisher ) # Return publish records. Parameters: Name Type Description Default publish PublisherStructValue target publisher required Returns: Type Description RecordsInterface Columns - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rclcpp_intra_publish_timestamp (Optional) - [topic_name]/rclcpp_inter_publish_timestamp (Optional) - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_write_timestamp (Optional) - [topic_name]/message_timestamp - [topic_name]/source_timestamp (Optional) [topic_name]/tilde_publish_timestamp (Optional) [topic_name]/tilde_message_id (Optional) subscribe_records ( subscription ) # Provide subscription records. Parameters: Name Type Description Default subscription_value SubscriptionStructValue Target subscription value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [topic_name]/message_timestamp - [topic_name]/source_timestamp Raises: Type Description InvalidArgumentError timer_records ( timer ) # Return timer records. Parameters: Name Type Description Default timer TimerStructValue [description] required Returns: Type Description RecordsInterface Columns - [callback_name]/timer_event - [callback_name]/callback_start - [callback_name]/callback_end variable_passing_records ( variable_passing_info ) # Return variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo target variable passing info. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_end_timestamp - [callback_name]/callback_start_timestamp","title":"infra"},{"location":"infra/#caret_analyze.infra.InfraBase","text":"infrastracture base class.","title":"InfraBase"},{"location":"infra/#caret_analyze.infra.Lttng","text":"Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource.","title":"Lttng"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.compose_callback_records","text":"Compose callback records of all communications in one records. Returns: Type Description RecordsInterface columns: - callback_start_timestamp - callback_end_timestamp - is_intra_process - callback_object","title":"compose_callback_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.compose_inter_proc_comm_records","text":"Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional)","title":"compose_inter_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.compose_intra_proc_comm_records","text":"Compose intra process communication records of all communications in one records. Returns: Type Description RecordsInterface columns: - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - message_timestamp","title":"compose_intra_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_callback_groups","text":"Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ]","title":"get_callback_groups()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_executors","text":"Get executors information. Returns: Type Description Sequence [ ExecutorInfo ]","title":"get_executors()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_nodes","text":"Get nodes. Returns: Type Description Sequence [ NodeValueWithId ] nodes info.","title":"get_nodes()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publisher_qos","text":"Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos","title":"get_publisher_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publishers","text":"Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ]","title":"get_publishers()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_rmw_impl","text":"Get rmw implementation. Returns: Type Description str rmw_implementation","title":"get_rmw_impl()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_callbacks","text":"Get subscription callbacks infomation. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ]","title":"get_subscription_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_qos","text":"Get subscription qos. Parameters: Name Type Description Default sub SubscriptionCallbackValueLttng target subscription required Returns: Type Description Qos","title":"get_subscription_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timer_callbacks","text":"Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ]","title":"get_timer_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timers","text":"Get timers information. Returns: Type Description Sequence [ TimerValue ]","title":"get_timers()"},{"location":"infra/#caret_analyze.infra.RecordsProvider","text":"","title":"RecordsProvider"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.callback_records","text":"Compose callback records. Parameters: Name Type Description Default callback_info CallbackStructInfo [description] required Returns: Type Description RecordsInterface [description]","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.variable_passing_records","text":"Compose variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo required Returns: Type Description RecordsInterface","title":"variable_passing_records()"},{"location":"infra/#caret_analyze.infra.RecordsProviderLttng","text":"Bases: RuntimeDataProvider Records are processed and measurement results are calculated. In addition to merging, filtering and other operations are performed here.","title":"RecordsProviderLttng"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.callback_records","text":"Return callback duration records. Parameters: Name Type Description Default callback_val CallbackStructValue target callback value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [callback_name]/callback_end_timestamp","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.communication_records","text":"Provide communication records. Parameters: Name Type Description Default comm_info CommunicationStructInfo communicadtion info. required Returns: Type Description RecordsInterface Columns: - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_publish_timestamp (Optional) - [callback_name]/callback_start_timestamp","title":"communication_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.publish_records","text":"Return publish records. Parameters: Name Type Description Default publish PublisherStructValue target publisher required Returns: Type Description RecordsInterface Columns - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rclcpp_intra_publish_timestamp (Optional) - [topic_name]/rclcpp_inter_publish_timestamp (Optional) - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_write_timestamp (Optional) - [topic_name]/message_timestamp - [topic_name]/source_timestamp (Optional) [topic_name]/tilde_publish_timestamp (Optional) [topic_name]/tilde_message_id (Optional)","title":"publish_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.subscribe_records","text":"Provide subscription records. Parameters: Name Type Description Default subscription_value SubscriptionStructValue Target subscription value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [topic_name]/message_timestamp - [topic_name]/source_timestamp Raises: Type Description InvalidArgumentError","title":"subscribe_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.timer_records","text":"Return timer records. Parameters: Name Type Description Default timer TimerStructValue [description] required Returns: Type Description RecordsInterface Columns - [callback_name]/timer_event - [callback_name]/callback_start - [callback_name]/callback_end","title":"timer_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.variable_passing_records","text":"Return variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo target variable passing info. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_end_timestamp - [callback_name]/callback_start_timestamp","title":"variable_passing_records()"},{"location":"plot/","text":"CallbackFrequencyPlot # Bases: TimeSeriesPlot Class that provides API for callback execution frequency. This class provides the API to visualize the execution frequency per unit of time for each callback and to obtain it in the pandas DataFrame format. CallbackJitterPlot # Bases: TimeSeriesPlot Class that provides API for callback jitter. This class provides the API to visualize the jitter per unit of time for each callback and to obtain it in the pandas DataFrame format. CallbackLatencyPlot # Bases: TimeSeriesPlot Class that provides API for callback latency. This class provides the API to visualize the latency per unit of time for each callback and to obtain it in the pandas DataFrame format. Plot # create_callback_frequency_plot ( callbacks ) staticmethod # Get CallbackFrequencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackFrequencyPlot create_callback_jitter_plot ( callbacks ) staticmethod # Get CallbackJitterPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackJitterPlot create_callback_latency_plot ( callbacks ) staticmethod # Get CallbackLatencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackLatencyPlot TimeSeriesPlot # show ( xaxis_type = None , ywheel_zoom = True , export_path = None ) # Draw a line graph for each callback using the bokeh library. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of x-axis of the line graph to be plotted. \"system_time\", \"index\", or \"sim_time\" can be specified. The default is \"system_time\". None ywheel_zoom bool If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel. True export_path Optional [ str ] If you give path, the drawn graph will be saved as a file. None Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\". to_dataframe ( xaxis_type = None ) # Get time series data for each callback in pandas DataFrame format. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of time for timestamp. \"system_time\", \"index\", or \"sim_time\" can be specified. The default is \"system_time\". None Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\". Notes # xaxis_type \"system_time\" and \"index\" return the same DataFrame.","title":"plot"},{"location":"plot/#caret_analyze.plot.CallbackFrequencyPlot","text":"Bases: TimeSeriesPlot Class that provides API for callback execution frequency. This class provides the API to visualize the execution frequency per unit of time for each callback and to obtain it in the pandas DataFrame format.","title":"CallbackFrequencyPlot"},{"location":"plot/#caret_analyze.plot.CallbackJitterPlot","text":"Bases: TimeSeriesPlot Class that provides API for callback jitter. This class provides the API to visualize the jitter per unit of time for each callback and to obtain it in the pandas DataFrame format.","title":"CallbackJitterPlot"},{"location":"plot/#caret_analyze.plot.CallbackLatencyPlot","text":"Bases: TimeSeriesPlot Class that provides API for callback latency. This class provides the API to visualize the latency per unit of time for each callback and to obtain it in the pandas DataFrame format.","title":"CallbackLatencyPlot"},{"location":"plot/#caret_analyze.plot.Plot","text":"","title":"Plot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot.create_callback_frequency_plot","text":"Get CallbackFrequencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackFrequencyPlot","title":"create_callback_frequency_plot()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot.create_callback_jitter_plot","text":"Get CallbackJitterPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackJitterPlot","title":"create_callback_jitter_plot()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot.create_callback_latency_plot","text":"Get CallbackLatencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackLatencyPlot","title":"create_callback_latency_plot()"},{"location":"plot/#caret_analyze.plot.TimeSeriesPlot","text":"","title":"TimeSeriesPlot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.show","text":"Draw a line graph for each callback using the bokeh library. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of x-axis of the line graph to be plotted. \"system_time\", \"index\", or \"sim_time\" can be specified. The default is \"system_time\". None ywheel_zoom bool If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel. True export_path Optional [ str ] If you give path, the drawn graph will be saved as a file. None Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\".","title":"show()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.to_dataframe","text":"Get time series data for each callback in pandas DataFrame format. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of time for timestamp. \"system_time\", \"index\", or \"sim_time\" can be specified. The default is \"system_time\". None Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\".","title":"to_dataframe()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.to_dataframe--notes","text":"xaxis_type \"system_time\" and \"index\" return the same DataFrame.","title":"Notes"},{"location":"record/","text":"RecordInterface # Interface for Record class. This behavior is similar to the dictionary type. To avoid conflicts with the pybind metaclass, ABC is not used. add ( key , stamp ) abstractmethod # Add(Update) column value. Parameters: Name Type Description Default key str key name to set. required stamp int key value to set. required change_dict_key ( old_key , new_key ) abstractmethod # Change columns name. Parameters: Name Type Description Default old_key str column name to be changed. required new_key str new column name. required columns () property abstractmethod # Get columnnames. Returns: Type Description Set [ str ] Column names. data () property abstractmethod # Convert to dictionary. Returns: Name Type Description data Dict [ str , int ] dictionary data. drop_columns ( columns ) abstractmethod # Drop columns method. Parameters: Name Type Description Default columns List [ str ] columns to be dropped. required equals ( other ) abstractmethod # Compare record. Parameters: Name Type Description Default other RecordInterface comparison target. required Returns: Type Description bool True if record data is same, otherwise false. get ( key ) abstractmethod # Get value for specific column. Parameters: Name Type Description Default key str key name to get. required Returns: Type Description int Value for selected key. get_with_default ( key , v ) abstractmethod # Get value for specific column. Parameters: Name Type Description Default key str key name to get. required v int default value. required Returns: Type Description int Value for selected key. merge ( other ) abstractmethod # Mege record. Parameters: Name Type Description Default other RecordInterface merge target. required inplace bool inplace record if true, otherwise false. required Returns: Type Description Record Merged record class if inplace = false, otherwise None. RecordsInterface # Interface for Record class. To avoid conflicts with the pybind metaclass, ABC is not used. append ( other ) abstractmethod # Append new record. Parameters: Name Type Description Default other RecordInterface record to be added. required append_column ( column , values ) abstractmethod # Append column to records. Parameters: Name Type Description Default column str required values List [ int ] required bind_drop_as_delay () abstractmethod # Convert the dropped points to records converted as delay. clone () abstractmethod # Get duplicated records. Returns: Type Description RecordsInterface deep-copyed records. columns () property abstractmethod # Get columnnames. Returns: Type Description Sequence [ str ] Column names. concat ( other ) abstractmethod # Concat records. Parameters: Name Type Description Default other RecordsInterface records to be concatenated. required Returns: Type Description RecordsInterface concatenated records if inplace=False, otherwise None. data () property abstractmethod # Get records list. Returns: Type Description Seque [ RecordInterface ] Records list. drop_columns ( columns ) abstractmethod # Drop columns. Parameters: Name Type Description Default columns List [ str ] columns to be dropped. required equals ( other ) abstractmethod # Equals method. Parameters: Name Type Description Default other RecordsInterface comparison target. required Returns: Type Description bool true if record data is same, otherwise false. filter_if ( f ) abstractmethod # Get filterd records. Parameters: Name Type Description Default f Callable [[ RecordInterface ], bool ] condition function. required inplace bool inplace original instance if true. required groupby ( columns ) abstractmethod # Split based on the value of the given column name. merge ( right_records , join_left_key , join_right_key , columns , how , * , progress_label = None ) abstractmethod # Merge records by key match. Parameters: Name Type Description Default right_records RecordInterface merge target. required join_left_key str Key to use for matching. required join_right_key str Key to use for matching. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Example # left_records = Records([ Record({'join_key': 1, 'left_other': 1}), Record({'join_key': 2, 'left_other': 2}), ]) right_records = Records([ Record({'join_key': 2, 'right_other': 3}), Record({'join_key': 1, 'right_other': 4}), ]) expected = Records([ Record({'join_key': 1, 'left_other': 1, 'right_other': 4}), Record({'join_key': 2, 'left_other': 2, 'right_other': 3}), ]) left_records.merge(right_records, 'join_key').equals(expected) True merge_sequencial ( right_records , left_stamp_key , right_stamp_key , join_left_key , join_right_key , columns , how , * , progress_label = None ) abstractmethod # Merge chronologically contiguous records. Merge left_records[left_key] and the right_records[right_key] that occurred immediately after it. If join_key is set, left_records[join_key]==right_records[join_key] is added as condition. Parameters: Name Type Description Default right_records RecordsInterface merge target. required left_stamp_key str left records key name to use for comparison in time series merge. required right_stamp_key str right records key name to use for comparison in time series merge. required join_key str join key name to use equal condition. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Records # RecordsInterface Merged records. Example # left_records = Records([ Record({'join_key': 1, 'left_stamp_key': 0}), Record({'join_key': 2, 'left_stamp_key': 3}) ]) right_records = Records([ Record({'join_key': 2, 'right_stamp_key': 5}), Record({'join_key': 1, 'right_stamp_key': 6}) ]) expected = Records([ Record({'join_key': 1, 'left_stamp_key': 0, 'right_stamp_key': 6}), Record({'join_key': 2, 'left_stamp_key': 3, 'right_stamp_key': 5}), ]) left_records.merge_sequencial( right_records, 'left_stamp_key', 'right_stamp_key', 'join_key', 'inner' ).equals(expected) True merge_sequencial_for_addr_track ( source_stamp_key , source_key , copy_records , copy_stamp_key , copy_from_key , copy_to_key , sink_records , sink_stamp_key , sink_from_key , columns , * , progress_label = None ) abstractmethod # Merge for tracking addresses when copying occurs. Parameters: Name Type Description Default source_stamp_key str key name indicating time stamp for source records required source_key str Key name indicating the address of the copy source for source records. required copy_records Recordsinterface copy records required copy_stamp_key str key name indicating time stamp for copy records required copy_from_key str Key name indicating the address of the copy source for source records. required copy_to_key str Key name indicating the address of the copy destination required sink_records RecordsInterface sink-side records required sink_stamp_key str keyname indicating time stamp for copy records required sink_from_key str Key name indicating the address of the copy destination required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Merged records. Examples: >>> source_records = Records ([ Record({'source_key': 1, 'source_stamp': 0}), ]) >>> copy_records = Records ([ Record({'copy_from_key': 1, 'copy_to_key': 11, 'copy_stamp_key': 1}) ]) >>> sink_records = Records ([ Record({'sink_from_key': 11, 'sink_stamp': 2}), Record({'sink_from_key': 1, 'sink_stamp': 3}), ]) >>> expected = Records ([ Record({'source_stamp':0, 'sink_stamp':3, 'source_key':1}), Record({'source_stamp':0, 'sink_stamp':2, 'source_key':1}), ]) >>> source_records . merge_sequencial_for_addr_track ( 'source_stamp', 'source_key', copy_records, 'copy_stamp_key', 'copy_from_key', 'copy_to_key', sink_records, 'sink_stamp', 'sink_from_key' ).equals(expected) True reindex ( columns ) # Reindex columns. Parameters: Name Type Description Default columns List [ str ] required rename_columns ( columns ) abstractmethod # Rename columns. Parameters: Name Type Description Default columns Dict [ str , str ] rename params. same as dataframe rename. required sort ( key , sub_key = None , ascending = True ) abstractmethod # Sort records. Parameters: Name Type Description Default key str key name to used for sort. required sub_key str second key name to used for sort. None ascending bool ascending if True, descending if false. True sort_column_order ( ascending = True , put_none_at_top = True ) abstractmethod # Sort records by ordered columns. Parameters: Name Type Description Default ascending bool ascending if True, descending if false. True put_none_at_top bool True to_dataframe () abstractmethod # Convert to pandas dataframe. Returns: Type Description pandas . DataFrame Records data.","title":"record"},{"location":"record/#caret_analyze.record.RecordInterface","text":"Interface for Record class. This behavior is similar to the dictionary type. To avoid conflicts with the pybind metaclass, ABC is not used.","title":"RecordInterface"},{"location":"record/#caret_analyze.record.interface.RecordInterface.add","text":"Add(Update) column value. Parameters: Name Type Description Default key str key name to set. required stamp int key value to set. required","title":"add()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.change_dict_key","text":"Change columns name. Parameters: Name Type Description Default old_key str column name to be changed. required new_key str new column name. required","title":"change_dict_key()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.columns","text":"Get columnnames. Returns: Type Description Set [ str ] Column names.","title":"columns()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.data","text":"Convert to dictionary. Returns: Name Type Description data Dict [ str , int ] dictionary data.","title":"data()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.drop_columns","text":"Drop columns method. Parameters: Name Type Description Default columns List [ str ] columns to be dropped. required","title":"drop_columns()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.equals","text":"Compare record. Parameters: Name Type Description Default other RecordInterface comparison target. required Returns: Type Description bool True if record data is same, otherwise false.","title":"equals()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get","text":"Get value for specific column. Parameters: Name Type Description Default key str key name to get. required Returns: Type Description int Value for selected key.","title":"get()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get_with_default","text":"Get value for specific column. Parameters: Name Type Description Default key str key name to get. required v int default value. required Returns: Type Description int Value for selected key.","title":"get_with_default()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.merge","text":"Mege record. Parameters: Name Type Description Default other RecordInterface merge target. required inplace bool inplace record if true, otherwise false. required Returns: Type Description Record Merged record class if inplace = false, otherwise None.","title":"merge()"},{"location":"record/#caret_analyze.record.RecordsInterface","text":"Interface for Record class. To avoid conflicts with the pybind metaclass, ABC is not used.","title":"RecordsInterface"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.append","text":"Append new record. Parameters: Name Type Description Default other RecordInterface record to be added. required","title":"append()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.append_column","text":"Append column to records. Parameters: Name Type Description Default column str required values List [ int ] required","title":"append_column()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.bind_drop_as_delay","text":"Convert the dropped points to records converted as delay.","title":"bind_drop_as_delay()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.clone","text":"Get duplicated records. Returns: Type Description RecordsInterface deep-copyed records.","title":"clone()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.columns","text":"Get columnnames. Returns: Type Description Sequence [ str ] Column names.","title":"columns()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.concat","text":"Concat records. Parameters: Name Type Description Default other RecordsInterface records to be concatenated. required Returns: Type Description RecordsInterface concatenated records if inplace=False, otherwise None.","title":"concat()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.data","text":"Get records list. Returns: Type Description Seque [ RecordInterface ] Records list.","title":"data()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.drop_columns","text":"Drop columns. Parameters: Name Type Description Default columns List [ str ] columns to be dropped. required","title":"drop_columns()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.equals","text":"Equals method. Parameters: Name Type Description Default other RecordsInterface comparison target. required Returns: Type Description bool true if record data is same, otherwise false.","title":"equals()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.filter_if","text":"Get filterd records. Parameters: Name Type Description Default f Callable [[ RecordInterface ], bool ] condition function. required inplace bool inplace original instance if true. required","title":"filter_if()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.groupby","text":"Split based on the value of the given column name.","title":"groupby()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge","text":"Merge records by key match. Parameters: Name Type Description Default right_records RecordInterface merge target. required join_left_key str Key to use for matching. required join_right_key str Key to use for matching. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface","title":"merge()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge--example","text":"left_records = Records([ Record({'join_key': 1, 'left_other': 1}), Record({'join_key': 2, 'left_other': 2}), ]) right_records = Records([ Record({'join_key': 2, 'right_other': 3}), Record({'join_key': 1, 'right_other': 4}), ]) expected = Records([ Record({'join_key': 1, 'left_other': 1, 'right_other': 4}), Record({'join_key': 2, 'left_other': 2, 'right_other': 3}), ]) left_records.merge(right_records, 'join_key').equals(expected) True","title":"Example"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial","text":"Merge chronologically contiguous records. Merge left_records[left_key] and the right_records[right_key] that occurred immediately after it. If join_key is set, left_records[join_key]==right_records[join_key] is added as condition. Parameters: Name Type Description Default right_records RecordsInterface merge target. required left_stamp_key str left records key name to use for comparison in time series merge. required right_stamp_key str right records key name to use for comparison in time series merge. required join_key str join key name to use equal condition. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None","title":"merge_sequencial()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial--records","text":"RecordsInterface Merged records.","title":"Records"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial--example","text":"left_records = Records([ Record({'join_key': 1, 'left_stamp_key': 0}), Record({'join_key': 2, 'left_stamp_key': 3}) ]) right_records = Records([ Record({'join_key': 2, 'right_stamp_key': 5}), Record({'join_key': 1, 'right_stamp_key': 6}) ]) expected = Records([ Record({'join_key': 1, 'left_stamp_key': 0, 'right_stamp_key': 6}), Record({'join_key': 2, 'left_stamp_key': 3, 'right_stamp_key': 5}), ]) left_records.merge_sequencial( right_records, 'left_stamp_key', 'right_stamp_key', 'join_key', 'inner' ).equals(expected) True","title":"Example"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial_for_addr_track","text":"Merge for tracking addresses when copying occurs. Parameters: Name Type Description Default source_stamp_key str key name indicating time stamp for source records required source_key str Key name indicating the address of the copy source for source records. required copy_records Recordsinterface copy records required copy_stamp_key str key name indicating time stamp for copy records required copy_from_key str Key name indicating the address of the copy source for source records. required copy_to_key str Key name indicating the address of the copy destination required sink_records RecordsInterface sink-side records required sink_stamp_key str keyname indicating time stamp for copy records required sink_from_key str Key name indicating the address of the copy destination required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Merged records. Examples: >>> source_records = Records ([ Record({'source_key': 1, 'source_stamp': 0}), ]) >>> copy_records = Records ([ Record({'copy_from_key': 1, 'copy_to_key': 11, 'copy_stamp_key': 1}) ]) >>> sink_records = Records ([ Record({'sink_from_key': 11, 'sink_stamp': 2}), Record({'sink_from_key': 1, 'sink_stamp': 3}), ]) >>> expected = Records ([ Record({'source_stamp':0, 'sink_stamp':3, 'source_key':1}), Record({'source_stamp':0, 'sink_stamp':2, 'source_key':1}), ]) >>> source_records . merge_sequencial_for_addr_track ( 'source_stamp', 'source_key', copy_records, 'copy_stamp_key', 'copy_from_key', 'copy_to_key', sink_records, 'sink_stamp', 'sink_from_key' ).equals(expected) True","title":"merge_sequencial_for_addr_track()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.reindex","text":"Reindex columns. Parameters: Name Type Description Default columns List [ str ] required","title":"reindex()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.rename_columns","text":"Rename columns. Parameters: Name Type Description Default columns Dict [ str , str ] rename params. same as dataframe rename. required","title":"rename_columns()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.sort","text":"Sort records. Parameters: Name Type Description Default key str key name to used for sort. required sub_key str second key name to used for sort. None ascending bool ascending if True, descending if false. True","title":"sort()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.sort_column_order","text":"Sort records by ordered columns. Parameters: Name Type Description Default ascending bool ascending if True, descending if false. True put_none_at_top bool True","title":"sort_column_order()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.to_dataframe","text":"Convert to pandas dataframe. Returns: Type Description pandas . DataFrame Records data.","title":"to_dataframe()"},{"location":"runtime/","text":"Application # Bases: Summarizable callback_group_names () property # Get callback group names. Returns: Type Description List [ str ] callback group name list. callback_groups () property # Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list. callback_names () property # Get callback names. Returns: Type Description List [ str ] callback name list. callbacks () property # Get callbacks. Returns: Type Description List [ CallbackBase ] callback list. communications () property # Get communications. Returns: Type Description List [ Communication ] communication list. executor_names () property # Get executor names. Returns: Type Description List [ str ] executor name list. executors () property # Get executors. Returns: Type Description List [ Executor ] executor list. get_callback ( callback_name ) # Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callback_group ( callback_group_name ) # Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callbacks ( * callback_names ) # Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communication ( publisher_node_name , subscription_node_name , topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communications ( topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_executor ( executor_name ) # Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node ( node_name ) # Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_path ( node_name , subscribe_topic_name , publish_topic_name ) # Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_paths ( node_name ) # Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_path ( path_name ) # Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. node_names () property # Get node names. Returns: Type Description List [ str ] node name list. node_paths () property # Get paths. Returns: Type Description List [ NodePathStructValue ] path list. nodes () property # Get nodes. Returns: Type Description List [ Node ] node list. path_names () property # Get path names. Returns: Type Description List [ str ] path name list. paths () property # Get paths. Returns: Type Description List [ Path ] path list. summary () property # Get application summary. Returns: Type Description Summary summary info. topic_names () property # Get topic names. Returns: Type Description List [ str ] topic name list. CallbackGroup # Bases: Summarizable callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name node_name () property # Get node name. Returns: Type Description str node name PathBase # Base class for Latency. column_names () property # Get column names. Returns: Type Description List [ str ] column names to_dataframe ( remove_dropped = False , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Convert to dataframe. Parameters: Name Type Description Default remove_dropped If true, eliminate the records that caused the drop. False treat_drop_as_delay Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay. to_histogram ( binsize_ns = 1000000 , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Convert to histogram data. Parameters: Name Type Description Default binsize_ns int bin size for histogram. default 1ms. 1000000 treat_drop_as_delay bool Convert dropped records as a delay. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay. to_records () # Convert to records. Returns: Type Description RecordsInterface Information for each delay. to_timeseries ( remove_dropped = False , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Convert to timeseries data. Parameters: Name Type Description Default remove_dropped bool If true, eliminate the records that caused the drop. False treat_drop_as_delay bool Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay. VariablePassing # Bases: PathBase , Summarizable callback_name_read () property # Get read-side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write-side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name","title":"runtime"},{"location":"runtime/#caret_analyze.runtime.Application","text":"Bases: Summarizable","title":"Application"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_group_names","text":"Get callback group names. Returns: Type Description List [ str ] callback group name list.","title":"callback_group_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_groups","text":"Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list.","title":"callback_groups()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_names","text":"Get callback names. Returns: Type Description List [ str ] callback name list.","title":"callback_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] callback list.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.communications","text":"Get communications. Returns: Type Description List [ Communication ] communication list.","title":"communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executor_names","text":"Get executor names. Returns: Type Description List [ str ] executor name list.","title":"executor_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executors","text":"Get executors. Returns: Type Description List [ Executor ] executor list.","title":"executors()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback","text":"Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback_group","text":"Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback_group()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callbacks","text":"Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communication","text":"Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communication()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communications","text":"Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_executor","text":"Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_executor()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node","text":"Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_path","text":"Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_paths","text":"Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_path","text":"Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_names","text":"Get node names. Returns: Type Description List [ str ] node name list.","title":"node_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_paths","text":"Get paths. Returns: Type Description List [ NodePathStructValue ] path list.","title":"node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.nodes","text":"Get nodes. Returns: Type Description List [ Node ] node list.","title":"nodes()"},{"location":"runtime/#caret_analyze.runtime.application.Application.path_names","text":"Get path names. Returns: Type Description List [ str ] path name list.","title":"path_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.paths","text":"Get paths. Returns: Type Description List [ Path ] path list.","title":"paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.summary","text":"Get application summary. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.application.Application.topic_names","text":"Get topic names. Returns: Type Description List [ str ] topic name list.","title":"topic_names()"},{"location":"runtime/#caret_analyze.runtime.CallbackGroup","text":"Bases: Summarizable","title":"CallbackGroup"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name","title":"callback_group_type_name()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.PathBase","text":"Base class for Latency.","title":"PathBase"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.column_names","text":"Get column names. Returns: Type Description List [ str ] column names","title":"column_names()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_dataframe","text":"Convert to dataframe. Parameters: Name Type Description Default remove_dropped If true, eliminate the records that caused the drop. False treat_drop_as_delay Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay.","title":"to_dataframe()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_histogram","text":"Convert to histogram data. Parameters: Name Type Description Default binsize_ns int bin size for histogram. default 1ms. 1000000 treat_drop_as_delay bool Convert dropped records as a delay. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay.","title":"to_histogram()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_records","text":"Convert to records. Returns: Type Description RecordsInterface Information for each delay.","title":"to_records()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_timeseries","text":"Convert to timeseries data. Parameters: Name Type Description Default remove_dropped bool If true, eliminate the records that caused the drop. False treat_drop_as_delay bool Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay.","title":"to_timeseries()"},{"location":"runtime/#caret_analyze.runtime.VariablePassing","text":"Bases: PathBase , Summarizable","title":"VariablePassing"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_read","text":"Get read-side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_write","text":"Get write-side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/","text":"CallbackChain # Bases: MessageContext TYPE_NAME = 'callback_chain' class-attribute # Callback chain. Latency is calculated from callback durations in the node path. When a path within a node passes through multiple callbacks, it is assumed that messages are passed between callbacks by a buffer of queue size 1 (ex. a member variable that stores a single message). If the queue size is larger than 1, the node latency may be calculated to be small. CallbackGroupStructValue # Bases: ValueObject , Summarizable Callback group value object. __init__ ( callback_group_type , node_name , callback_values , callback_group_name ) # Construct callback group value object. Parameters: Name Type Description Default callback_group_type_name str required node_names List [ str ] required callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name node_name () property # Get node name. Returns: Type Description str node name CallbackGroupType # Bases: ValueObject callback group type class. __init__ ( name ) # Construct CallbackGroupType. Parameters: Name Type Description Default name str type name ['mutually_exclusive', 'reentrant'] required type_name () property # Return callback group type name. Returns: Type Description str type name. CallbackGroupValue # Bases: ValueObject Callback group value object. __init__ ( callback_group_type_name , node_name , node_id , callback_ids , callback_group_id , * , callback_group_name = None ) # Construct callback value object. Parameters: Name Type Description Default callback_group_type_name str required node_names Tuple [ str ] required callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_ids () property # Get callback ids. Returns: Type Description Tuple [ str , ...] callback ids CallbackStructValue # Bases: Summarizable Callback value base class. callback_name () property # Get callback name. Returns: Type Description str callback name callback_type () property abstractmethod # Get callback type name. Returns: Type Description CallbackType callback type node_name () property # Get node name. Returns: Type Description str node name symbol () property # Get callback symbol name. Returns: Type Description str callback symbol name CallbackType # Bases: ValueObject callback group type class. __init__ ( name ) # Construct callback type. Parameters: Name Type Description Default name str callback type name ['timer_callback', 'subscription_callback'] required type_name () property # Return callback type name. Returns: Type Description str type name. CallbackValue # Bases: ValueObject Callback value base class. callback_id () property # Get callback id. callback id is is used to bind. callback id should be the same if the node name and other properties are the same. If any properties is different, it should be a different callback id. Returns: Type Description str callback unique id. callback_name () property # Get callback name. Note that different architecture_readers return different values. Returns: Type Description str callback name callback_type () property abstractmethod # Get callback type name. Returns: Type Description CallbackType callback type node_id () property # Get node id. Returns: Type Description str node name node_name () property # Get node name. Returns: Type Description str node name symbol () property # Get callback symbol name. Returns: Type Description str callback symbol name ExecutorStructValue # Bases: ValueObject , Summarizable Executor info for architecture. ExecutorType # Bases: ValueObject executor type class. type_name () property # Return executor type name. Returns: Type Description str type name. ExecutorValue # Bases: ValueObject Executor info for architecture. InheritUniqueStamp # Bases: MessageContext TYPE_NAME = 'inherit_unique_stamp' class-attribute # Inherit header timestamp. Latency is calculated for pub/sub messages with the same timestamp value. If the input timestamp is not unique, it may calculate an incorrect value. MessageContext # Bases: ValueObject , Summarizable Structured message context value. MessageContextType # Bases: ValueObject Message context type. NodeStructValue # Bases: ValueObject , Summarizable Executor info for architecture. PathValue # Bases: ValueObject Path name alias. PublisherStructValue # Bases: ValueObject , Summarizable Structured publisher value. PublisherValue # Bases: ValueObject Publisher value. Qos # Bases: ValueObject , Summarizable qos info. SubscriptionCallbackStructValue # Bases: CallbackStructValue , ValueObject Structured subscription callback value. SubscriptionCallbackValue # Bases: CallbackValue Subscription callback value. SubscriptionStructValue # Bases: ValueObject , Summarizable Subscription info. SubscriptionValue # Bases: ValueObject Subscription info. Tilde # Bases: MessageContext TYPE_NAME = 'tilde' class-attribute # tilde. Latency is calculated from tilde. TimerCallbackStructValue # Bases: CallbackStructValue , ValueObject Structured timer callback value. TimerCallbackValue # Bases: CallbackValue Timer callback value. TimerStructValue # Bases: ValueObject , Summarizable Timer info. TimerValue # Bases: ValueObject Timer info. UseLatestMessage # Bases: MessageContext TYPE_NAME = 'use_latest_message' class-attribute # Use messsage context VariablePassingStructValue # Bases: ValueObject , Summarizable variable passing info. callback_name_read () property # Get read-side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write-side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name VariablePassingValue # Bases: ValueObject variable passing info. callback_id_read () property # Get read-side callback id. Returns: Type Description [ str ] read-side callback id. callback_id_write () property # Get write-side callback id. Returns: Type Description [ str ] write-side callback id. node_name () property # Get node name. Returns: Type Description str node name","title":"value_objects"},{"location":"value_objects/#caret_analyze.value_objects.CallbackChain","text":"Bases: MessageContext","title":"CallbackChain"},{"location":"value_objects/#caret_analyze.value_objects.message_context.CallbackChain.TYPE_NAME","text":"Callback chain. Latency is calculated from callback durations in the node path. When a path within a node passes through multiple callbacks, it is assumed that messages are passed between callbacks by a buffer of queue size 1 (ex. a member variable that stores a single message). If the queue size is larger than 1, the node latency may be calculated to be small.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupStructValue","text":"Bases: ValueObject , Summarizable Callback group value object.","title":"CallbackGroupStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.__init__","text":"Construct callback group value object. Parameters: Name Type Description Default callback_group_type_name str required node_names List [ str ] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name","title":"callback_group_type_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupType","text":"Bases: ValueObject callback group type class.","title":"CallbackGroupType"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.__init__","text":"Construct CallbackGroupType. Parameters: Name Type Description Default name str type name ['mutually_exclusive', 'reentrant'] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.type_name","text":"Return callback group type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupValue","text":"Bases: ValueObject Callback group value object.","title":"CallbackGroupValue"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.__init__","text":"Construct callback value object. Parameters: Name Type Description Default callback_group_type_name str required node_names Tuple [ str ] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_ids","text":"Get callback ids. Returns: Type Description Tuple [ str , ...] callback ids","title":"callback_ids()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackStructValue","text":"Bases: Summarizable Callback value base class.","title":"CallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_name","text":"Get callback name. Returns: Type Description str callback name","title":"callback_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_type","text":"Get callback type name. Returns: Type Description CallbackType callback type","title":"callback_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.symbol","text":"Get callback symbol name. Returns: Type Description str callback symbol name","title":"symbol()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackType","text":"Bases: ValueObject callback group type class.","title":"CallbackType"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.__init__","text":"Construct callback type. Parameters: Name Type Description Default name str callback type name ['timer_callback', 'subscription_callback'] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.type_name","text":"Return callback type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackValue","text":"Bases: ValueObject Callback value base class.","title":"CallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_id","text":"Get callback id. callback id is is used to bind. callback id should be the same if the node name and other properties are the same. If any properties is different, it should be a different callback id. Returns: Type Description str callback unique id.","title":"callback_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_name","text":"Get callback name. Note that different architecture_readers return different values. Returns: Type Description str callback name","title":"callback_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_type","text":"Get callback type name. Returns: Type Description CallbackType callback type","title":"callback_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_id","text":"Get node id. Returns: Type Description str node name","title":"node_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.symbol","text":"Get callback symbol name. Returns: Type Description str callback symbol name","title":"symbol()"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorStructValue","text":"Bases: ValueObject , Summarizable Executor info for architecture.","title":"ExecutorStructValue"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorType","text":"Bases: ValueObject executor type class.","title":"ExecutorType"},{"location":"value_objects/#caret_analyze.value_objects.executor.ExecutorType.type_name","text":"Return executor type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorValue","text":"Bases: ValueObject Executor info for architecture.","title":"ExecutorValue"},{"location":"value_objects/#caret_analyze.value_objects.InheritUniqueStamp","text":"Bases: MessageContext","title":"InheritUniqueStamp"},{"location":"value_objects/#caret_analyze.value_objects.message_context.InheritUniqueStamp.TYPE_NAME","text":"Inherit header timestamp. Latency is calculated for pub/sub messages with the same timestamp value. If the input timestamp is not unique, it may calculate an incorrect value.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.MessageContext","text":"Bases: ValueObject , Summarizable Structured message context value.","title":"MessageContext"},{"location":"value_objects/#caret_analyze.value_objects.MessageContextType","text":"Bases: ValueObject Message context type.","title":"MessageContextType"},{"location":"value_objects/#caret_analyze.value_objects.NodeStructValue","text":"Bases: ValueObject , Summarizable Executor info for architecture.","title":"NodeStructValue"},{"location":"value_objects/#caret_analyze.value_objects.PathValue","text":"Bases: ValueObject Path name alias.","title":"PathValue"},{"location":"value_objects/#caret_analyze.value_objects.PublisherStructValue","text":"Bases: ValueObject , Summarizable Structured publisher value.","title":"PublisherStructValue"},{"location":"value_objects/#caret_analyze.value_objects.PublisherValue","text":"Bases: ValueObject Publisher value.","title":"PublisherValue"},{"location":"value_objects/#caret_analyze.value_objects.Qos","text":"Bases: ValueObject , Summarizable qos info.","title":"Qos"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionCallbackStructValue","text":"Bases: CallbackStructValue , ValueObject Structured subscription callback value.","title":"SubscriptionCallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionCallbackValue","text":"Bases: CallbackValue Subscription callback value.","title":"SubscriptionCallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionStructValue","text":"Bases: ValueObject , Summarizable Subscription info.","title":"SubscriptionStructValue"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionValue","text":"Bases: ValueObject Subscription info.","title":"SubscriptionValue"},{"location":"value_objects/#caret_analyze.value_objects.Tilde","text":"Bases: MessageContext","title":"Tilde"},{"location":"value_objects/#caret_analyze.value_objects.message_context.Tilde.TYPE_NAME","text":"tilde. Latency is calculated from tilde.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.TimerCallbackStructValue","text":"Bases: CallbackStructValue , ValueObject Structured timer callback value.","title":"TimerCallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.TimerCallbackValue","text":"Bases: CallbackValue Timer callback value.","title":"TimerCallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.TimerStructValue","text":"Bases: ValueObject , Summarizable Timer info.","title":"TimerStructValue"},{"location":"value_objects/#caret_analyze.value_objects.TimerValue","text":"Bases: ValueObject Timer info.","title":"TimerValue"},{"location":"value_objects/#caret_analyze.value_objects.UseLatestMessage","text":"Bases: MessageContext","title":"UseLatestMessage"},{"location":"value_objects/#caret_analyze.value_objects.message_context.UseLatestMessage.TYPE_NAME","text":"Use messsage context","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.VariablePassingStructValue","text":"Bases: ValueObject , Summarizable variable passing info.","title":"VariablePassingStructValue"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_read","text":"Get read-side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_write","text":"Get write-side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.VariablePassingValue","text":"Bases: ValueObject variable passing info.","title":"VariablePassingValue"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_read","text":"Get read-side callback id. Returns: Type Description [ str ] read-side callback id.","title":"callback_id_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_write","text":"Get write-side callback id. Returns: Type Description [ str ] write-side callback id.","title":"callback_id_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"}]}